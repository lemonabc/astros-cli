/**
basic定义全局公用方法，是moca的核心。
在此约定命名空间的方式，
.代表全局命名空间;
@main basic
@module basic
@since 1_0_0
**/


/**
定义字体属性
@class .font
@module basic
**/
.font{
    /**
    设置字体的样式，调用方法：
        
        Selector{
            .font family('微软雅黑');
        }
    
    @method family
    @param {String} [@family=@baseFontFamily] 默认字体为@baseFontFamily
    **/
    .family(@family: @baseFontFamily){
        font-family : @family;
    }
    /**
    设置字体的大小，调用方法：
        
        Selector{
            .font size(18px);
        }
    
    @method size
    @param {Number} [@size=@baseFontSize] 默认大小为@baseFontSize
    **/
    .size(@size: @baseFontSize){
        font-size: @size;
    }
    /**
    字体风格
        
        Selector{
            .font .style();
        }
        
    @method  style  
    @param {Number} @style 默认正常
    */
    .style(@style:normal){
        font-style:@style;
    }
    /**
    字体粗细
        
        Selector{
            .font .w(700);
        }
        
    @method  style  
    @param {Number} @style 默认正常
    */
    .w(@weight:normal){
        font-weight:@weight;
    }
}

/**
定义文本属性
@class .text
@module basic
**/
.text{
    // Solution: 清除inline, inline-block间隙
    .nospacewrap(){
        font-size: 0;
        // ~'[;font-size: 12px;]';
        *font-size: 0;
        font-family: arial;
        // ~'[;letter-spacing: -3px;]';
        *letter-spacing: normal;
        *word-spacing: -1px;
    }
    .nospaceitem(){
        .display .inline-block();
        font-size: @baseFontSize;
        font-family: @baseFontFamily;
        letter-spacing: normal;
        word-spacing: normal;
    }


    // Solution: 未知尺寸元素垂直居中
    .valignwrap(){
        .text .nospacewrap();
        .after,&:after{
            .text .nospaceitem();
            height: 100%;
            vertical-align: middle;
            content: '';
        }
    }
    .valignitem(){
        .text .nospaceitem();
        vertical-align: middle;
    }
    /**
    处理文本截字
    单行文字溢出显示省略号(需额外设宽)
        
        Selector{
            .text .ellipsis();
        }
        
    @method ellipsis
    */
    .ellipsis(){
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    /**
    强制换行
        
        Selector{
            .text .wrap();
        }
        
    @method wrap
    */
    .wrap(){
        word-wrap: break-word;
        word-break: break-all;
    }
    /**
    强制一行显示(需额外设宽)
        
        Selector{
            .text .nowrap();
        }
        
    @method nowrap
    */
    .nowrap(){
        overflow: hidden;
        white-space: nowrap;
    }
    /**
    定义隐藏文本
        
        Selector{
            .text .hide();
        }
        
    @method hide
    */
    .hide(){
        overflow: hidden;
        text-indent: 100%;
        white-space: nowrap;
    }
    /*
    opacity(透明度),使用方法如下：
            
        Selector{
            .opacity(0_2);
        }
        
    @method opacity
    @param {Number} @opacity 

    */
    .opacity(@opacity){
        filter: ~"alpha(opacity=@{opacity})";
        // -ms-filter:"progid:DXImageTransform_Microsoft_Alpha(Opacity=@{opacity})";
        opacity: @opacity/100;
    }

}


/**
定义盒模型属性
@class .box
@module basic
**/
.box{
    /**
    设置元素宽高
    @method size
    @param {Number} @sizeW 宽度值
    @param {Number} @sizeH 宽度值
    @for Global
    */
    .size(@sizeW, @sizeH){
        width:@sizeW;
        height:@sizeH;
    }

    /**
    生成正方形
    @method square
    @param {Number} @size 尺寸大小
    @for Global
    */
    .square(@size){
        width:~'@{size}px';
        height:~'@{size}px';
    }

    /**
    设置边框圆角半径，调用方法：
        
        Selector{
            .box .radius(4px);
        }
    
    @method radius
    @param {Number} @radius
    **/
    .radius(@radius){
        border-radius: @radius;
        -moz-border-radius: @radius;/* 兼容老版本firefox */
    }

    /**
    设置左上角圆角半径，调用方法：
        
        Selector{
            .box .radius-tl(4px);
        }
    
    @method radius-tl
    @param {Number} @radius
    **/
    .radius-tl(@radius){
        border-top-left-radius: @radius;
        -moz-border-top-left-radius: @radius;
    }
    /**
    设置右上角圆角半径，调用方法：
        
        Selector{
            .box .radius-tr(4px);
        }
    
    @method radius-tr
    @param {Number} @radius
    **/
    .radius-tr(@radius){
        border-top-right-radius: @radius;
        -moz-border-top-right-radius: @radius;
    }
    /**
    设置右下角圆角半径，调用方法：
        
        Selector{
            .box .radius-br(4px);
        }
    
    @method radius-br
    @param {Number} @radius
    **/
    .radius-br(@radius){
        border-bottom-right-radius: @radius;
        -moz-border-bottom-right-radius: @radius;
    }
    /*
    设置左下角圆角半径，调用方法：
        
        Selector{
            .box .radius-bl(4px);
        }
    
    @method radius-bl
    @param {Number} @radius
    */
    .radius-bl(@radius){
        border-bottom-left-radius: @radius;
        -moz-border-bottom-left-radius: @radius;
    }

    /**
    设置容器的阴影，使用方法如下：
        
    Selector{
        .box .shadow(0 0 3px rgab(0,0,0,_03));
    }

    @method box-shadow
    @param {String} @box-shadow
    @for Global
    **/
    .shadow(@box-shadow){
        box-shadow: (@box-shadow);
    }
    /**
    设置容器的阴影，使用方法如下：
        
    Selector{
        .box .img(url(border.png) 30 30 round);
    }

    @method border-img
    @param {String} @border-img
    @for Global
    **/
    .img(@border-img){
        -webkit-border-image:@box-img;
        -o-border-image:@box-img;
        border-image:@box-img;
    }
    /**
    box-sizing(盒模型)，有“content-box”和“border-box”两个值。
定义 box-sizing: content-box; 时，浏览器对盒模型的解释遵从我们之前认识到的 W3C 标准；
    定义 box-sizing: border-box; 时，浏览器对盒模型的解释与 IE6 相同； 使用方法如下：
            
        Selector{
           .box .sizing(content-box);
        }
        
    @method box-sizing
    @param {String} @box-sizing
    @for Global
    */
    .sizing(@box-sizing:border-box){
        -moz-box-sizing: @box-sizing;
         -ms-box-sizing: @box-sizing;
             box-sizing: @box-sizing;
    }

}


/**
定义元素显示
@class .display
@module basic
**/
.display{
    /**
    设置元素以行内显示
    
        Selector{
            .display .inline();
        }
    
    @method inline
    **/
    .inline(){
        display:inline;
    }
    /**
    设置元素以内联块显示
    
        Selector{
            .display .inline-block();
        }
    
    @method inline-block
    **/
    .inline-block(){
        display: inline-block;
        *display: inline;
        *zoom: 1;
    }
        /**
    设置元素以块元素显示
        Selector{
            .display block();
        }
     
    @method block
    */
    .block(){
        .display .show();
    }
    /**
    不占位隐藏
    
        Selector{
            .display .fixed();
        }
        
    @method hide
    */
    .fixed(){
        display:fixed;
    }
    /**
    不占位隐藏
    
        Selector{
            .display .hide();
        }
        
    @method hide
    */
    .hide(){
        display: none;
    }
    /**
    显示(display:block)
        
        Selector{
            .display .show();
        }
        
    @method show
    */
    .show(){
        display: block;
    }
    /**
    占位隐藏
        
        Selector{
            .display .hidden();
        }
        
    @method hidden
    */
    .hidden(){
        visibility: hidden;
    }
    /**
    显示(visibility:visible)
        
        Selector{
            .display .visible();
        }
        
    @method visible
    */
    .visible(){
        visibility: visible;
    }
}



/**
定义背景
@class .bg
@module basic
**/
.bg{
    /**
    .color(背景颜色)使用方法如下：
            
        Selector{
            .bg .color(#ccc);
        }
        
    @method .img
    @param {String} @bgcolor 色值
    @for Global
    **/
    .color(@bgcolor){
        background-color:@bgcolor;       
    }
    /**
    .linear(2色简单线性渐变) 使用方法如下：
            
        Selector{
            .bg .linear('background, 0_5s, ease-in');
        }
        
    @method background-linear
    @param {String} @deg 
    @param {String} @startColor 颜色开始位置
    @param {String} @endColor 颜色结束位置
    @for Global
    **/
    .linear(@deg){
        //background-image: -webkit-gradient(linear,center top,center bottom,from(@startColor),to(@endColor));
        background-image: -webkit-linear-gradient(e(@deg));
        background-image:    -moz-linear-gradient(e(@deg));
        background-image:      -o-linear-gradient(e(@deg));
        background-image:         linear-gradient(e(@deg));
    }
    /**
    .img(背景图片兼容二倍图)使用方法如下：
            
        Selector{
            .bg .img('../img','png');
        }
        
    @method .img
    @param {String} @imgName 图片名字
    @param {String} @imgType 图片后缀
    @for Global
    **/
    .img(@imgUrl,@imgType){
        @bgImg:~'@{imgUrl}.@{imgType}';
        @bgImg2x:~'@{imgUrl}2x.@{imgType}';
        background-image: url(@bgImg);
        // background-image: -webkit-image-set(url('@{bgImg}') ~'1x',url('@{bgImg2x}') ~'2x');
        // background-image: -moz-image-set(url('@{bgImg}') ~'1x',url('@{bgImg2x}') ~'2x');
        // background-image: -ms-image-set(url('@{bgImg}') ~'1x',url('@{bgImg2x}') ~'2x');
        // background-image: -o-image-set(url('@{bgImg}') ~'1x',url('@{bgImg2x}') ~'2x'); 
        background-image: -webkit-image-set(url('@{bgImg}'));
        background-image: -moz-image-set(url('@{bgImg}'));
        background-image: -ms-image-set(url('@{bgImg}'));
        background-image: -o-image-set(url('@{bgImg}'));        
    }
    /**
    .repeat(背景是否平铺及平铺方式)使用方法如下：
            
        Selector{
            .bg .repeat(no);
        }
        
    @method .repeat
    @param {String} @repeat no为不平铺,yes为平铺，x为横向平铺，y为纵向平铺
    @for Global
    */
    .repeat(@repeat)when(@repeat = no){
        background-repeat:no-repeat;
    }
    .repeat(@repeat)when(@repeat = yes){
        background-repeat:repeat;
    }
    .repeat(@repeat)when(@repeat = x){
        background-repeat:repeat-x;
    }
    .repeat(@repeat)when(@repeat = y){
        background-repeat:repeat-y;
    }
    /**
    .position(背景位置)使用方法如下：
            
        Selector{
            .bg .position(top center);
        }
        
    @method .repeat
    @param {String} @position 背景位置
    @for Global
    */
    .position(@position){
        background-position:@position;
    }
    /**
    .size(背景图片尺寸)使用方法如下：
            
        Selector{
            .bg .size(60px 100px);
        }
        
    @method .repeat
    @param {String} @size 背景图片尺寸
    @for Global
    */
    .size(@size){
        background-position:@size;
    }

    /**
    .origin(背景图片尺寸)使用方法如下：
            
        Selector{
            .bg .origin(border);
        }
        
    @method .repeat
    @param {String} @origin 背景图片尺寸
    @for Global
    */
    .origin(@origin)when(@origin = border){
        background-position:border-box;
    }
    .origin(@origin)when(@origin = padding){
        background-position:padding-box;
    }
    .origin(@origin)when(@origin = content){
        background-position:content-box;
    }
    
}
/**
清除盒模型内浮动方法，使用方法如下：
        
    Selector{
        .clearfix();
    }
    
@method clearfix
@for Global
**/

.clearfix(){
    *zoom:1;
    &:after{
        content: "\0020"; display: block; height: 0; overflow: hidden; clear:both;
    }
}

/**
设置placeholder的字体颜色，使用方法如下：
        
    Selector{
        placeholder(#333);
    }
    
@method placeholder
@param {Number} [@color: @inputPlaceholderColor] 默认值为@inputPlaceholderColor

**/
.placeholder(@color: @inputPlaceholderColor) {
  &:-moz-placeholder            { color: @color; } // Firefox 4-18
  &::-moz-placeholder           { color: @color; } // Firefox 19+
  &:-ms-input-placeholder       { color: @color; } // Internet Explorer 10+
  &::-webkit-input-placeholder  { color: @color; } // Safari and Chrome
}




/**
.transform(变形) 使用方法如下：
        
    Selector{
        .transform('rotate | scale | skew | translate');
    }
    
@method .transform
@param {String} @attr 
@for Global
**/

.transform(@attr){
    -moz-transform:@attr;
    -webkit-transform:@attr;
    -o-transform:@attr;
    -ms-transform:@attr;
    transform:@attr;
}

/**
.transition(动画) 使用方法如下：
        
    Selector{
        .transition(''<transition-property'> || <'transition-duration'> || <'transition-timing-function'> || <'transition-delay'> [, [<'transition-property'> || <'transition-duration'> || <'transition-timing-function'> || <'transition-delay'>');
    }
    
@method .transform
@param {String} @attr 
@for Global
**/

.transition(@attr){
    -moz-transition:e(@attr);
    -webkit-transition:e(@attr);
    -o-transition:e(@attr);
    transition:e(@attr);
}

/**
.animation(动画) 使用方法如下：
        
    Selector{
        .animation('<animation-name> || <animation-duration> || <animation-timing-function> || <animation-delay> || <animation-iteration-count> || <animation-direction>] [, [<animation-name> || <animation-duration> || <animation-timing-function> || <animation-delay> || <animation-iteration-count> || <animation-direction>]');
    }
    
@method .animation
@param {String} @attr 
@for Global
**/
.animation(@attr){
    animation:@attr;
    -moz-animation:@attr;
    -webkit-animation:@attr;
    -o-animation:@attr;
}

/**
.@keyframes(动画) 使用方法如下：
        
.@keyframes();
    
@method .@keyframes
@param {String} @name @attr 
@for Global
**/
// .@keyframes(@name,@attr){
//     @keyframes @name
//     {
//         e(@attr);
//     }

//     @-moz-keyframes @name
//     {
//         e(@attr);
//     }

//     @-webkit-keyframes @name
//     {
//         e(@attr);
//     }

//     @-o-keyframes @name
//     {
//         e(@attr);
//     }
// }